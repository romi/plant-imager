#!/usr/bin/env romi_bpy
import bpy
import distutils
import distutils.util
import argparse
import tempfile
from mathutils import Vector
from flask import jsonify
from flask import Flask, send_file
from flask import request, send_from_directory
from werkzeug.utils import secure_filename
import numpy as np
import sys
import glob
import flask
import os
import time
import argparse
import bpy
from mathutils import Matrix, Vector
import imageio
from random import randint
from mathutils import Color
from copy import copy
#---------------------------------------------------------------
#
# 3x4 P matrix from Blender camera
#---------------------------------------------------------------

# BKE_camera_sensor_size
def get_sensor_size(sensor_fit, sensor_x, sensor_y):
    if sensor_fit == 'VERTICAL':
        return sensor_y
    return sensor_x

# BKE_camera_sensor_fit
def get_sensor_fit(sensor_fit, size_x, size_y):
    if sensor_fit == 'AUTO':
        if size_x >= size_y:
            return 'HORIZONTAL'
        else:
            return 'VERTICAL'
    return sensor_fit

image_extensions = [".png", ".jpg"]

class Camera():
    def __init__(self, scene, data, hdri_enabled=False):
        self.scene = scene
        self.cam = scene.camera
        self.render = scene.render
        self.data = data
        self.hdri_enabled = hdri_enabled
        if hdri_enabled:
            self.setup_hdri()
        else: self.setup_background()

    def get_K(self):
        camd = self.cam.data
        scene = self.scene
        f_in_mm = camd.lens
        scale = scene.render.resolution_percentage / 100
        resolution_x_in_px = scale * scene.render.resolution_x
        resolution_y_in_px = scale * scene.render.resolution_y
        sensor_size_in_mm = get_sensor_size(camd.sensor_fit, camd.sensor_width, camd.sensor_height)
        sensor_fit = get_sensor_fit(
            camd.sensor_fit,
            scene.render.pixel_aspect_x * resolution_x_in_px,
            scene.render.pixel_aspect_y * resolution_y_in_px
        )
        pixel_aspect_ratio = scene.render.pixel_aspect_y / scene.render.pixel_aspect_x
        if sensor_fit == 'HORIZONTAL':
            view_fac_in_px = resolution_x_in_px
        else:
            view_fac_in_px = pixel_aspect_ratio * resolution_y_in_px
        pixel_size_mm_per_px = sensor_size_in_mm / f_in_mm / view_fac_in_px
        s_u = 1 / pixel_size_mm_per_px
        s_v = 1 / pixel_size_mm_per_px / pixel_aspect_ratio

        # Parameters of intrinsic calibration matrix K
        u_0 = resolution_x_in_px / 2 - camd.shift_x * view_fac_in_px
        v_0 = resolution_y_in_px / 2 + camd.shift_y * view_fac_in_px / pixel_aspect_ratio
        skew = 0 # only use rectangular pixels

        K = [[s_u, skew, u_0],
            [   0,  s_v, v_0],
            [   0,    0,   1]]
        return K

    def get_RT(self):
        # bcam stands for blender camera
        R_bcam2cv = Matrix(
            ((1, 0,  0),
            (0, -1, 0),
            (0, 0, -1)))

        # Use matrix_world instead to account for all constraints
        location, rotation = self.cam.matrix_world.decompose()[0:2]
        R_world2bcam = rotation.to_matrix().transposed()

        # Use location from matrix_world to account for constraints:     
        T_world2bcam = -1*R_world2bcam @ location

        # Build the coordinate transform matrix from world to computer vision camera
        R_world2cv = R_bcam2cv @ R_world2bcam
        T_world2cv = R_bcam2cv @ T_world2bcam

        R = np.matrix(R_world2cv)
        T = np.array(T_world2cv)

        return R.tolist(), T.tolist()


    def set_intrinsics(self, width, height, focal):
        """
        :input w image width
        :input h image height
        :input f focal length (equiv. 35mm)
        """

        self.render.resolution_x = width
        self.render.resolution_y = height
        self.render.resolution_percentage = 100

        # Set camera fov in degrees
        self.cam.data.angle = 2*np.arctan(35/focal)
        self.cam.data.clip_end = 10000

    def move(self, tx=None, ty=None, tz=None, rx=None, ry=None, rz=None):
        self.cam.rotation_mode = 'XYZ'
        if tx is not None:
            self.cam.location[0] = float(tx)
        if ty is not None:
            self.cam.location[1] = float(ty)
        if tz is not None:
            self.cam.location[2] = float(tz)
        if rx is not None:
            self.cam.rotation_euler[0] = float(rx)*(pi/180.0)
        if ry is not None:
            self.cam.rotation_euler[1] = float(ry)*(pi/180.0)
        if rz is not None:
            self.cam.rotation_euler[2] = float(rz)*(pi/180.0)
    def setup_background(self):
        world = bpy.data.worlds['World']
        world.use_nodes = True
	    bg = world.node_tree.nodes['Background']
        r = 0
        g = 0
        b = 0
        bg.inputs[0].default_value[:3] = (r, g, b)
	    bg.inputs[1].default_value = 1.0
        print("yessss")


    def setup_hdri(self):
        self.data.worlds["World"].use_nodes = True
        world_nodes = self.data.worlds["World"].node_tree.nodes
        for node in world_nodes:
            world_nodes.remove(node)
        
        node = world_nodes.new("ShaderNodeTexEnvironment")
        node.name = "Environment Texture"
        
        node = world_nodes.new("ShaderNodeBackground")
        node.name = "Background"
        
        node = world_nodes.new("ShaderNodeOutputWorld")
        node.name = "World Output"
        
        output = world_nodes["Environment Texture"].outputs["Color"]
        input = world_nodes["Background"].inputs["Color"]
        self.data.worlds["World"].node_tree.links.new(output, input)
        
        output = world_nodes["Background"].outputs["Background"]
        input = world_nodes["World Output"].inputs["Surface"]
        self.data.worlds["World"].node_tree.links.new(output, input)
        
        world = self.scene.world
        nodes_tree = self.data.worlds[world.name].node_tree
        self.env_text_node = nodes_tree.nodes["Environment Texture"]
        self.hdri_enabled = True

    def load_hdri(self, path):
        if not self.hdri_enabled:
            self.setup_hdri()
        current_bg_image = bpy.data.images.load(path)
        self.env_text_node.image = current_bg_image   
        self.scene.render.film_transparent = False


class MultiClassObject():
    def __init__(self, scene, data):
        self.data = data
        self.scene = scene
        self.objects = {}
        self.classes = []
        self.scene_materials = [m.name for m in self.data.materials]
        self.scene_objects = [o.name for o in self.data.objects]

    def show_class(self, class_name):
        for o in self.data.objects:
            try:
                m = o.data.materials[0]
                print("material = %s"%m.name)
                if class_name in m.name:
                    o.hide_render = False
                else:
                    o.hide_render = True
            except:
                o.hide_render = True
        self.scene.render.film_transparent = True

    def show_all(self):
        for o in self.data.objects:
            o.hide_render = False
        self.scene.render.film_transparent = False


    def clear_all_rotation(self):
        for x in self.objects.values():
            x.rotation_euler[0] = 0

    def update_classes(self, colorize: bool=False, palette_location: str=None):
        self.classes = []
        specular = np.random.rand() * 0.02

        if colorize:
            if palette_location is None:
                color = [np.random.rand(), np.random.rand(), np.random.rand()]
            else:
                im = imageio.imread(palette_location)
                palette_width, palette_height, channels = im.shape
                color = (im[randint(0, palette_width - 1), randint(0, palette_height - 1)]/255).tolist()

        for o in self.data.objects:
            if o.name not in self.scene_objects:
                for m in o.data.materials:
                    if m.name not in self.scene_materials:
                        self.classes.append(m.name)
                    if colorize:
                        if len(color) == 3:
                            color += [1.0]
                        m.node_tree.nodes[1].inputs['Base Color'].default_value = color
                        m.node_tree.nodes[1].inputs['Specular'].default_value = specular
                
    def load_obj(self, fname, dx = None, dy = None, dz = None, colorize = True, palette_location=None):
        """move object by dx, dy, dz if specified"""

        for o in self.objects.values():
            self.data.objects.remove(o, do_unlink=True)
        self.objects = {}
 
        for m in bpy.data.materials:
            if not m.name in self.scene_materials:
                bpy.data.materials.remove(m)

        bpy.ops.import_scene.obj(filepath=fname)
        self.update_classes(colorize, palette_location)
       
        for m in self.classes:
            for o in self.data.objects:
                if m in o.name:
                    self.objects[m] = o
                    break

        try:
            dx = float(dx)
        except:
            dx = 0.0
        try:
            dy = float(dy)
        except:
            dy = 0.0
        try:
            dz = float(dz)
        except:
            dz = 0.0

        for o in bpy.context.scene.objects:
            if o.name not in self.scene_objects:
                bpy.ops.object.select_all(action='DESELECT')
                # bpy.context.scene.objects.link(o)
                o.location.x = dx
                o.location.y = dy
                o.location.x = dz
                o.select_set(True)
                bpy.context.view_layer.objects.active = o
                print("transform %s"%o.name)
                bpy.ops.object.select_all(action='DESELECT')

        self.location = {
            "x" : dx,
            "y" : dy,
            "z" : dz
        }

        #self.clear_all_rotation()

class VirtualPlant(MultiClassObject):
    def add_leaf_displacement(self, leaf_class_name):
        for o in self.data.objects:
            if leaf_class_name in o.name:
                displace_modifier = o.modifiers.new(name="Displace.01", type='DISPLACE')
                tex = self.data.textures.new("Displace.01", 'CLOUDS')
                tex.noise_scale = 2.0
                displace_modifier.texture = tex

if __name__ == "__main__":
    with tempfile.TemporaryDirectory() as tmpdir:

        if 'Cube' in bpy.data.objects:
            bpy.data.objects.remove(bpy.data.objects['Cube'], do_unlink=True)
        if 'Light' in bpy.data.objects:
            bpy.data.objects.remove(bpy.data.objects['Light'], do_unlink=True)

        try:
            idx = sys.argv.index('--')
            sys.argv = ["null"] + sys.argv[idx+1:]
        except:
            sys.argv = ["null"]

        parser = argparse.ArgumentParser(description='Run a romiscan task.')

        parser.add_argument('--data-dir', dest='data_dir', default='data',
                        help='location of obj and mtl files')
        parser.add_argument('--hdri-dir', dest='hdri_dir', default='hdri',
                        help='location of hdr files')
        parser.add_argument('--port', dest='port', default=5000,
                        help='port for flask server')
        parser.add_argument('--scene', dest='scene', default=None,
                        help='load blender scene')

        args = parser.parse_args()

        if args.scene is not None:
            bpy.ops.wm.open_mainfile(filepath=args.scene)

        data_dir = args.data_dir
        hdri_dir = args.hdri_dir

        pi = 3.14159265

        object_list = glob.glob(os.path.join(data_dir, "*.obj"))
        object_list = [os.path.basename(o) for o in object_list]


        background_list = glob.glob(os.path.join(hdri_dir, "*.hdr"))
        background_list = [os.path.basename(o) for o in background_list]
        L = len(background_list)

        cam = Camera(bpy.context.scene, bpy.data, False)
        cam.set_intrinsics(1616, 1080, 24)
        cam.move(-100, 0, 50, 90, 0, -90)

        obj = VirtualPlant(bpy.context.scene, bpy.data)

        app = Flask(__name__)

        @app.route('/classes', methods = ['GET'])
        def classes():
            return jsonify(obj.classes)
        
        @app.route('/bounding_box', methods = ['GET'])
        def bounding_box():
            xmin, ymin, zmin = 10000, 10000, 10000
            xmax, ymax, zmax = -10000, -10000, -10000
            for o in obj.data.objects:
                m = o.matrix_world
                if o.name not in obj.scene_objects:
                    print("m = ")
                    print(m)
                    for b in o.bound_box:
                        b1 = m@Vector(b)
                        x,y,z = b1
                        xmin, ymin, zmin = np.minimum([xmin, ymin, zmin], [x,y,z])
                        xmax, ymax, zmax = np.maximum([xmax, ymax, zmax], [x,y,z])

            bbox ={
                "x" : [xmin, xmax],
                "y" : [ymin, ymax],
                "z" : [zmin, zmax]
            }
            return jsonify(bbox)

        @app.route('/backgrounds', methods = ['GET'])
        def backgrounds():
            return jsonify(background_list)

        @app.route('/camera_intrinsics', methods = ['POST', 'GET'])
        def camera_intrinsics():
            if flask.request.method == 'POST':
                kwargs = request.form.to_dict()
                cam.set_intrinsics(int(kwargs["width"]), int(kwargs["height"]), float(kwargs["focal"]))
                return jsonify('OK')
            else:
                K = cam.get_K()
                camera_model = {
                    "width" : cam.render.resolution_x,
                    "height" : cam.render.resolution_y,
                    "model" : "OPENCV",
                    "params" : [ K[0][0], K[1][1], K[0][2], K[1][2], 0.0, 0.0, 0.0, 0.0 ]
                }
                return jsonify(camera_model)

        @app.route('/camera_pose', methods = ['POST', 'GET'])
        def camera_pose():
            if flask.request.method == 'POST':
                kwargs = request.form.to_dict()
                cam.move(**kwargs)
                return jsonify('OK')
            else:
                R, T = cam.get_RT()
                return jsonify({ "rotmat" : R, "tvec" : T})

        @app.route('/upload_object', methods= ['GET', 'POST'])
        def upload_object():
            request = flask.request
            if flask.request.method == "GET":
                return  '''
                    <!doctype html>
                    <title>Upload object</title>
                    <h1>Upload object</h1>
                    <form method=post enctype=multipart/form-data>
                      <input type=file name=file>
                      <input type=file name=mtl>
                      <input type=file name=palette>
                      <input type=submit value=Upload>
                    </form>
                    '''
            kwargs = request.form
            dx = kwargs.get('dx')
            dy = kwargs.get('dy')
            dz = kwargs.get('dz')


            colorize = kwargs.get('colorize')
            if colorize is not None:
                colorize = distutils.util.strtobool(colorize)
            else:
                colorize = False
            palette_location = None

            if "palette" in request.files and request.files['palette'] != "":
                palette_file = request.files['palette']
                assert(os.path.splitext(palette_file.filename)[-1].lower() in image_extensions)
                palette_filename = secure_filename(palette_file.filename)
                palette_file.save(os.path.join(tmpdir, palette_filename))
                palette_location = os.path.join(tmpdir, palette_filename)

            if 'file' not in request.files:
                return "no file", 501
            file = request.files['file']
            if file.filename == '':
                return "no file", 502
            if file and os.path.splitext(file.filename)[-1].lower() == ".obj":
                filename = secure_filename(file.filename)
                file.save(os.path.join(tmpdir, filename))
                if 'mtl' in request.files:
                    mtl_file = request.files['mtl']
                    mtl_filename = "plant.mtl"
                    if mtl_file.filename != '' and os.path.splitext(mtl_file.filename)[-1].lower() == ".mtl":
                        mtl_file.save(os.path.join(tmpdir, mtl_filename))
                obj.load_obj(os.path.join(tmpdir, filename), dx, dy, dz, colorize, palette_location=palette_location)
                return "OK"
            return "wrong extension", 503

        @app.route('/upload_background', methods= ['GET', 'POST'])
        def upload_background():
            if flask.request.method == "GET":
                return  '''
                    <!doctype html>
                    <title>Upload background</title>
                    <h1>Upload background</h1>
                    <form method=post enctype=multipart/form-data>
                      <input type=file name=file>
                      <input type=submit value=Upload>
                    </form>
                    '''
            if 'file' not in request.files:
                return "no file", 500
            file = request.files['file']
            if file.filename == '':
                return "no file", 500
            if file and os.path.splitext(file.filename)[-1].lower() == ".hdr":
                filename = secure_filename(file.filename)
                file.save(os.path.join(tmpdir, filename))
                cam.load_hdri(os.path.join(tmpdir, filename))
                return "OK"
            return "wrong extension", 500

        @app.route("/add_random_displacement/<class_id>", methods=['GET'])
        def add_random_displacement(class_id):
            obj.add_leaf_displacement(class_id)
            return jsonify('OK')
       
        light_data = bpy.data.lights.new(type = 'POINT', name =  "flash")
        @app.route('/render', methods = ['GET'])
        def render():
            flash = request.args.get('flash')
            light_obj = None
            if flash is not None:
                    energy = 0.3 * np.random.choice([0.1,0.1,0.1,0.1,0.1,1,2,3,4,5,6,7,8,9,10,20])*1e8
                    light_obj = bpy.data.objects.new(name='Flash', object_data=light_data)
                    light_obj.location = cam.cam.location    
                    light_obj.rotation_euler = cam.cam.rotation_euler
                    light_obj.data.energy = energy
                    light_obj.data.shadow_soft_size = 1000
                    view_layer = bpy.context.view_layer
                    view_layer.active_layer_collection.collection.objects.link(light_obj)
                    light_obj.select_set(True)
                    view_layer.objects.active = light_obj
                    light_obj
            obj.show_all()
            

            bpy.context.scene.render.filepath = os.path.join(tmpdir, "plant.png")
            bpy.ops.render.render(write_still=True)
            if light_obj is not None: bpy.data.objects.remove(light_obj, do_unlink=True)
            return send_from_directory(tmpdir, "plant.png")

        @app.route('/render_class/<class_id>', methods = ['GET'])
        def render_class(class_id):
            obj.show_class(class_id)
            bpy.context.scene.render.filepath = os.path.join(tmpdir, "plant.png")
            bpy.ops.render.render(write_still=True)
            return send_from_directory(tmpdir, "plant.png")

        # cuda_devs, cl_devs = bpy.context.preferences.addons['cycles'].preferences.get_devices()
        # bpy.context.scene.render.engine = 'CYCLES'# echo $PYTHONPATH
        # Set the device_type
        # bpy.context.preferences.addons["cycles"].preferences.compute_device_type = "CUDA"
        
        # Set the device and feature set
        # bpy.context.scene.cycles.device = "GPU"
        # bpy.context.scene.cycles.feature_set = "SUPPORTED"

        app.run(debug=False, host="0.0.0.0", port=int(args.port))
